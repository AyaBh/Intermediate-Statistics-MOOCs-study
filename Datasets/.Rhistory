setwd("C:/Users/eyabe/Downloads/intermediate statistics")
setwd("C:/Users/eyabe/Downloads/intermediate statistics/data sets")
# Import required packages
library(readr)
library(plyr)
library(dplyr)
library(plotly)
library(xtable)
# Import required packages
library(readr)
library(plyr)
library(dplyr)
library(plotly)
library(xtable)
# We frst proceed to importing all our datasets
# Import effec data files
effec1_df <- read.csv("effec1.quest.compil.csv")
effec2_df <- read.csv("effec2.quest.compil.csv")
effec3_df <- read.csv("effec3.quest.compil.csv")
# Import usages_effec data files
usages_effec1_df <- read.csv("usages.effec1.csv")
usages_effec2_df <- read.csv("usages.effec2.csv")
usages_effec3_df <- read.csv("usages.effec3.csv")
# Import countries_hdi data file
countries_HDI_df <- read_csv("countries.HDI.csv",
locale = locale(encoding = "ISO-8859-1"),
col_names = c("Country","HDI", "Index"))
head(countries_HDI_df)
# Change H and M HDI to I
##Group together, for the HDI variable, the High and Medium level to create a
#new intermediate level.
levels(countries_HDI_df$HDI) <- c(levels(countries_HDI_df$HDI), "I")
countries_HDI_df$HDI[countries_HDI_df$HDI == "M"]  <- "I"
countries_HDI_df$HDI[countries_HDI_df$HDI == "H"]  <- "I"
head(countries_HDI_df)
# rbind effec data files
# we use rbind.fill instead of rbind because the length of tables doesn't match
effec_df <- rbind.fill(effec1_df, effec2_df, effec3_df)
head(effec_df)
# rbind usages_effec data files
usages_effec_df <- rbind.fill(usages_effec1_df, usages_effec2_df,
usages_effec3_df)
head(usages_effec_df)
#Obtain our final dataset by merging effec_df and usages_effec_df
df_no_HDI <- full_join(effec_df, usages_effec_df, by="Student_ID")
head(df_no_HDI)
# Merge df_no_HDI and countries_HDI_df
full_df <- full_join(df_no_HDI, countries_HDI_df[c("Country","HDI")], by = "Country")
head(full_df)
dim(full_df)
#create a new variable named n.videos that sums up all the videos viewed by users
full_df$n.videos <- rowSums(full_df[, 60:94], na.rm = TRUE)
#create a new variable named behave.perc
full_df$behave.perc <- full_df$n.videos/35
# select students who completed the course
completers_df <- filter(full_df, Exam.bin == 1)
dim(completers_df)
head(completers_df)
# select students who submitted at least one quiz or assignment but did not complete the course
disengaging_learners_df <- filter(
full_df, Exam.bin == 0 & (
Quizz.1.bin == 1 | Quizz.2.bin == 1 | Quizz.3.bin == 1 | Quizz.4.bin == 1 | Quizz.5.bin == 1 | Assignment.bin == 1
)
)
dim(disengaging_learners_df)
head(disengaging_learners_df)
# select students who submitted at least one quiz or assignment but did not complete the course
auditing_learners_df_2 <- filter(
full_df,
Exam.bin == 0 & last.quizz == 0 & Assignment.bin == 0 & behave.perc > 0.1)
dim(auditing_learners_df_2)
head(auditing_learners_df_2)
# select students who submitted at least one quiz or assignment but did not complete the course
bystanders_df_2 <- filter(
full_df,
Exam.bin == 0 & last.quizz == 0 & Assignment.bin == 0 & behave.perc <= 0.1)
dim(bystanders_df_2)
head(bystanders_df_2)
student_dist_df_3 <- data.frame(c("Completers", "Disengaging Learners", "Auditing Learners", "Bystanders"),c(nrow(completers_df), nrow(disengaging_learners_df), nrow(auditing_learners_df_2), nrow(bystanders_df_2)))
colnames(student_dist_df_3) <- c("Types", "Total")
student_dist_df_3$Percentage <- round((student_dist_df_3$Total/nrow(full_df)) * 100, 2)
student_dist_df_3 <- student_dist_df_3 %>% arrange(desc(Total))
student_dist_df_4 <- student_dist_df_3 %>%
mutate(csum = rev(cumsum(rev(Percentage))),
pos = Percentage/2 + lead(csum, 1),
pos = if_else(is.na(pos), Percentage/2, pos))
library(ggrepel)
library(forcats)
ggplot(student_dist_df_3, aes(x = "" , y = Percentage, fill = fct_inorder(Types))) +
geom_col(width = 1, color = 1) +
coord_polar(theta = "y") +
scale_fill_brewer(palette="Spectral") +
geom_label_repel(data = student_dist_df_4,
aes(y = pos, label = paste0(Percentage, "%")),
size = 4.5, nudge_x = 1, show.legend = FALSE) +
guides(fill = guide_legend(title = "Types")) +
theme_void()
library(ggrepel)
library(forcats)
ggplot(student_dist_df_3, aes(x = "" , y = Percentage, fill = fct_inorder(Types))) +
geom_col(width = 1, color = 1) +
coord_polar(theta = "y") +
scale_fill_brewer(palette="Set1") +
geom_label_repel(data = student_dist_df_4,
aes(y = pos, label = paste0(Percentage, "%")),
size = 4.5, nudge_x = 1, show.legend = FALSE) +
guides(fill = guide_legend(title = "Types")) +
theme_void()
library(ggrepel)
library(forcats)
ggplot(student_dist_df_3, aes(x = "" , y = Percentage, fill = fct_inorder(Types))) +
geom_col(width = 1, color = 1) +
coord_polar(theta = "y") +
scale_fill_brewer(palette="Spectral") +
geom_label_repel(data = student_dist_df_4,
aes(y = pos, label = paste0(Percentage, "%")),
size = 4.5, nudge_x = 1, show.legend = FALSE) +
guides(fill = guide_legend(title = "Types")) +
theme_void()
#Compare the number of views of videos between gen-ders.
#All ANOVAs are designed to test for differences among three or more groups. If you are only testing for
#a difference between two groups, use a t-test instead.
#F test to compare two variances
res.ftest <- var.test(n.videos ~ Gender, data = full_df)
res.ftest
#two-sample t-test
t.test(n.videos~Gender, full_df,var.equal = TRUE)
# Create a box-plot
bxp <- ggboxplot(
full_df, x = "Gender", y = "n.videos",
ylab = "n.videos", xlab = "Gender"
)
#Compare the number of views of videos depending on the HDI of the country of  origin.
test2=aov(n.videos~HDI, full_df)
summary(test2)
ggplot(full_df, aes(x = HDI, y = n.videos, fill = HDI)) +
geom_boxplot()  +
theme_classic()
#Use Gender, HDI and socioeconomic status as explaining variables
model_lm <- lm(n.videos~Gender+HDI, full_df)
summary(model_lm)
#introduce an ANOVA table
anova(model_lm)
#Update the model, and add an interaction parameter in the it (For instance Gen-der*HDI in R).
anova(lm(n.videos~Gender+HDI+HDI*Gender, full_df))
#use the summary of the model to see the interaction parameter.
summary(lm(n.videos~Gender+HDI+HDI*Gender, full_df))
#convert birth year to integer
full_df$birth.year <- as.integer(full_df$birth.year)
#create age groups
full_df$birth.year[full_df$birth.year<1940] <- NA
full_df$birth.year[full_df$birth.year>2020]<- NA
#calculate age
full_df$age <- 2020-full_df$birth.year
#create seq
seq_1 = seq(0,90,by=3)
#break age into seq1
full_df$age.group <- cut(full_df$age,seq_1)
head(full_df$age.group)
full_df_subset=full_df[c('Gender','HDI','n.videos','CSP','age.group')]
model6 <- lm(n.videos~Gender+HDI+CSP+age.group,full_df_subset)
step(model6,direction="both")
#create second age group
full_df$age.group2 <- cut(full_df$age,c(0,30,50,80,100))
head(full_df$age.group2)
full_df_subset = na.omit(full_df[c('Gender','HDI','n.videos','CSP','age.group','age.group2')])
model7 <- lm(n.videos~Gender+HDI+CSP+age.group2,full_df_subset)
(summary(step(model7,direction="both")))
print(xtable((summary(step(model7,direction="both")))))
full_df_subset2 = na.omit(full_df[c('Gender','HDI','n.videos','CSP')])
chisq <- chisq.test(table(full_df_subset2$Gender,full_df_subset2$HDI))
chisq
library(summarytools)
library(dplyr)
# fourth method:
full_df_subset2 %$%
ctable(Gender, HDI,
prop = "r", chisq = TRUE, headings = FALSE
) %>%
print(
method = "render",
style = "rmarkdown",
footnote = NA
)
library(vcd)
mosaic(~ Gender + HDI,
direction = c("v", "h"),
data = full_df_subset2,
shade = TRUE
)
#calculate residuals
round(chisq$residuals, 3)
model9 <- aov(n.videos~Gender+HDI+CSP+age.group2, data=full_df_subset)
TukeyHSD(model9, conf.level=.95)
plot(TukeyHSD(model9, conf.level=.95)
)
model10 <- lm(n.videos~Gender+HDI+CSP+age.group2,data=full_df_subset)
install.packages("multcomp")
library(multcomp)
# running glht()
post.hoc <- glht(model10)
# displaying the result table with summary()
summary(post.hoc)
summary(post.hoc, test = adjusted("bonferroni"))
#Logistic regression model
# if event is rare, odds ratio and relative risk are almost the same
mylogit <- glm(Exam.bin ~  Gender+HDI, data = full_df,family='binomial')
summary(mylogit)
aov(mylogit)
mod2 = glm(Exam.bin ~ HDI +relevel(as.factor(Gender), ref = "une femme"),data=full_df,family='binomial')
summary(mod2)
install.packages("magrittr")
install.packages('qqplot')
library(magrittr)
library(gplots)
install.packages("magrittr")
library(magrittr)
library(gplots)
library(finalfit)
library(dplyr)
library(ggplot2)
full_df %>%   or_plot('Exam.bin', c('Gender','HDI'),
breaks = c(0.5, 1, 5, 10, 20, 30),
table_text_size = 3.5)
full_df %>% mutate(Gender=factor(Gender,levels=c('une femme','un homme'))) %>%
or_plot('Exam.bin', c('Gender','HDI'), table_text_size = 3.5)
full_df %>%
or_plot(dependent, explanatory, table_text_size=4, title_text_size=14,
plot_opts=list(xlab("OR, 95% CI"), theme(axis.title = element_text(size=12))))
#plot distribution of n.videos
ggplot(full_df, aes(x=n.videos))+
geom_density(color="darkblue", fill="lightblue")
#plot distribution of n.videos
ggplot(full_df, aes(x=n.videos))+
geom_density(color="darkblue", fill="lightblue")
h=hist(full_df$n.videos,xlab="Number of videos",col="darkmagenta",
main="")
text(h$mids,h$counts,labels=h$counts, adj=c(0.5, -0.5))
qplot(sample=n.videos,data=full_df)
p <- ggplot(full_df, aes(sample = n.videos))
p + stat_qq() + stat_qq_line()
mod3 = glm(n.videos ~ HDI+Gender,data=full_df)
summary(mod3)
print(xtable(summary(mod3)))
par(mfrow=c(2,2)) # init 4 charts in 1 panel
plot(mod3)
plot(mod3$fitted,mod3$residuals,pch=19,col="grey",ylab="Residuals",xlab="Fitted")
# Load required packages for survival analysis
library(survival)
library(survminer)
library(dplyr)
install.packages("survminer")
install.packages("survminer")
n.videos_dec = quantile(full_df$n.videos, probs = seq(.1, .9, by = .1))
library(dplyr)
full_df<-full_df %>%
mutate(n.videos.decile = ntile(n.videos, 10))
full_df$status.vid=rep(NA, nrow(full_df))
for (i in 1:nrow(full_df)) {
if (full_df$n.videos.decile[i]<10) {full_df$status.vid[i]=1}
if (full_df$n.videos.decile[i]==10) {full_df$status.vid[i]=0}
}
fit2 <- survfit(Surv(n.videos.decile, status.vid) ~ HDI , data=full_df)
fit3 <- survfit(Surv(n.videos.decile, status.vid) ~ Gender , data=full_df)
ggsurvplot(fit3, data = full_df)
mod_cox <- coxph(formula = Surv(n.videos.decile, status.vid) ~ Gender + HDI, data = full_df)
mod_cox
library("survival")
library("survminer")
ggsurvplot(mod_cox, data = full_df)
ggsurvplot(fit3, data = full_df)
ggsurvplot(mod_cox, data = full_df)
ggforest(mod_cox,data=full_df)
ggforest(mod_cox,data=full_df)
fit <- survfit(Surv(n.videos.decile, status.vid) ~ Gender+HDI, data = full_df)
library(ggfortify)
library(survival)
autoplot(fit)
fit <- survfit(Surv(n.videos.decile, status.vid) ~ Gender+HDI, data = full_df)
model6 <- lm(n.videos~Gender+HDI+CSP+age.group,full_df_subset)
step(model6,direction="both")
#convert birth year to integer
full_df$birth.year <- as.integer(full_df$birth.year)
#create age groups
full_df$birth.year[full_df$birth.year<1940] <- NA
full_df$birth.year[full_df$birth.year>2020]<- NA
#calculate age
full_df$age <- 2020-full_df$birth.year
#create seq
seq_1 = seq(0,90,by=3)
#break age into seq1
full_df$age.group <- cut(full_df$age,seq_1)
head(full_df$age.group)
full_df_subset=full_df[c('Gender','HDI','n.videos','CSP','age.group')]
model6 <- lm(n.videos~Gender+HDI+CSP+age.group,full_df_subset)
step(model6,direction="both")
knitr::opts_chunk$set(warning = FALSE, message = FALSE)
# Import required packages
library(readr)
library(plyr)
library(dplyr)
library(plotly)
library(xtable)
library(tufte)
library(summarytools)
library(dplyr)
library(vcd)
#install.packages("multcomp")
library(multcomp)
library(finalfit)
library(ggplot2)
#install.packages("pscl")
library(pscl) #McFadden , pseudo-R2 library
library(survival)
library(survminer)
# Import effec data files
effec1_df <- read_csv("effec1.quest.compil.csv",
locale = locale(encoding = "ISO-8859-1"))
setwd("C:/Users/eyabe/Downloads/intermediate statistics/data sets/data sets")
# Import effec data files
effec1_df <- read_csv("effec1.quest.compil.csv",
locale = locale(encoding = "ISO-8859-1"))
setwd("C:/Users/eyabe/Downloads/intermediate statistics/data sets/data sets")
# Import effec data files
effec1_df <- read_csv("effec1.quest.compil.csv",
locale = locale(encoding = "ISO-8859-1"))
